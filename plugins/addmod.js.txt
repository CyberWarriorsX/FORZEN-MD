const config = require('../config')
const { cmd, commands } = require('../command')
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson} = require('../lib/functions')
const { DBM } = require('postgres_dbm')

cmd({
    pattern: "addmod",
    react: "⚙",
    alias: ["addmoderator"],
    desc: "Add a Moderator",
    category: "main",
    use: '.addmod',
    filename: __filename
},
async(conn, mek, m,{from, l, quoted, body, isCmd, command, mentionByTag , args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isCreator ,isDev, isAdmins, reply}) => {
try{
       const db_pool = new DBM({
    db: config.DATABASE_URL
})
		if(!isCreator) { if ( !isDev) return conn.sendMessage(from,{text:"🚫 *This is admin only command*"},{quoted:mek }) }
		const mention= await mentionByTag
		let users = await (mention[0]) || mek.msg.contextInfo.participant
		if (!users) return reply("🚫 *Couldn't find any user in context*")
		const data = await db_pool.get('MODERATORS')
		const duka = users.split("@")[0]
	        if(data.includes(duka)) return reply('❗ *User already in Moderators List*')
		let ok = data + "," + duka
		await db_pool.insert('MODERATORS', ok )
		await conn.sendMessage(from,{text: "*Moderators List Updated* ✔️"},{quoted:mek })
	
} catch (e) {
const mention= await mentionByTag
let users = await (mention[0]) || mek.msg.contextInfo.participant
const duka = users.split("@")[0]
	const db_pool = new DBM({
    db: config.DATABASE_URL
})
await db_pool.insert('MODERATORS', duka )
const datada = await db_pool.get('MODERATORS')
await conn.sendMessage(from,{text: "```" + datada + "``` *Added as a Moderator*" },{quoted:mek })

}
})